{"version":3,"sources":["Components/ErrorBoundary/index.tsx","Components/Navbar/index.tsx","Components/CalendarHeader/index.tsx","utils/calendarUtils.ts","utils/constants.ts","Components/EventOverlay/index.tsx","Components/CalendarDayColumn/index.tsx","Components/CalendarToolbar/index.tsx","utils/db.ts","utils/eventsData.ts","Context/AppContext.tsx","Containers/CalendarView/index.tsx","Containers/Home/index.tsx","Containers/App.tsx","reportWebVitals.ts","themes/default.js","index.tsx"],"names":["ErrorBoundary","state","hasError","error","errorInfo","console","this","Container","Typography","variant","Button","color","onClick","window","location","reload","props","children","_","Component","NavTitle","styled","flexGrow","Navbar","AppBar","position","Toolbar","HeaderRow","Box","marginTop","theme","spacing","flex","CalendarHeader","weekDays","display","width","overflow","minWidth","map","day","flexDirection","border","borderColor","p","gutterBottom","weekDayName","date","getDate","toDateString","days","getAllWeekDays","current","Date","weekDates","setDate","getDay","i","push","substr","getFormattedDayHours","arr","months","getFormattedTimeStampForEvent","duration","startHours","getHours","startMinutes","getMinutes","endDate","setMinutes","endHours","endMinutes","formatTimeString","hours","minutes","EVENTS_TABLE_NAME","EventOverlayWrapper","right","left","boxShadow","shadows","zIndex","tooltip","background","lightBlue","borderRadius","padding","EventOverlay","eventDuration","eventDate","top","height","CalendarDayColumn","events","renderEventForHour","hour","event","find","noWrap","title","hourLabel","ControlButtonsWrapper","marginLeft","marginRight","CalendarToolbar","startDate","goToNextWeek","goToPrevWeek","goToTodaysDate","alignItems","justifyContent","size","IconButton","getMonth","getFullYear","IndexedDb","database","db","tableName","openDB","upgrade","objectStoreNames","contains","createObjectStore","autoIncrement","keyPath","tx","transaction","store","objectStore","getAll","result","debug","JSON","stringify","values","value","put","getAllValue","AppContext","React","createContext","eventsData","AppContextProvider","useState","setEventsData","useEffect","a","length","putBulkValue","log","eventsMap","forEach","key","addDataToDB","Provider","Timelabel","Wrapper","CalendarGridWrapper","overflowY","CalendarView","setStartDate","setWeekDays","useContext","maxWidth","nextWeekDate","prevWeekDate","todayDate","Grid","ContentArea","paddingTop","paddingBottom","Home","container","direction","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultTheme","createMuiTheme","palette","common","black","white","paper","default","primary","light","main","dark","contrastText","secondary","text","disabled","hint","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.e162219e.chunk.js","sourcesContent":["import React, { Component, ErrorInfo, ReactNode } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\n/**\n * Error Boundaries can only be class object\n * Takes care of Error thrown by the components\n * Display Fallback UI\n * */\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <Container>\n          <Typography variant=\"h6\">Something went wrong</Typography>\n          <Typography variant=\"h6\">Please reload and try again</Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => window.location.reload()}\n          >\n            Reload\n          </Button>\n        </Container>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"@material-ui/core/styles/styled\";\n\n/**\n * Application navbar\n */\nconst Navbar = (): JSX.Element => {\n  return (\n    <AppBar position=\"relative\">\n      <Toolbar>\n        <NavTitle variant=\"h6\">Calendar</NavTitle>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nconst NavTitle = styled(Typography)({\n  flexGrow: 1,\n});\nexport default Navbar;\n","import { WeekDay } from \"utils/calendarUtils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"@material-ui/core/styles/styled\";\nimport Box from \"@material-ui/core/Box\";\n\n// CalendarHeader props\ntype Props = {\n  weekDays: WeekDay[];\n};\n\n/**\n * Renders Header For the Calendar with the selected weekDays\n */\nconst CalendarHeader = ({ weekDays }: Props) => {\n  return (\n    <HeaderRow display=\"flex\">\n      <Box width=\"65px\" display=\"flex\" flex=\"none\" />\n      <Box display=\"flex\" flex={1} overflow=\"hidden\">\n        <Box width={9} minWidth={9} />\n        {weekDays.map((day) => (\n          <Box\n            key={`${day.date.toDateString()}_header_row`}\n            display=\"flex\"\n            flexDirection=\"column\"\n            flex={1}\n            border={1}\n            borderColor=\"divider\"\n            p={1}\n          >\n            <Typography gutterBottom>{day.weekDayName}</Typography>\n            <Typography variant=\"h4\" color=\"textSecondary\">\n              {day.date.getDate()}\n            </Typography>\n          </Box>\n        ))}\n      </Box>\n    </HeaderRow>\n  );\n};\n\nconst HeaderRow = styled(Box)(({ theme }) => ({\n  marginTop: theme.spacing(2),\n  flex: \"none\",\n}));\n\nexport default CalendarHeader;\n","export type WeekDay = {\n  date: Date;\n  weekDayName: string;\n};\n\nconst days: string[] = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\n/**\n *\n * @param current Date for which week days are needed\n * @returns Array of dates of the week starting from sunday\n */\nexport const getAllWeekDays = (current: Date = new Date()): WeekDay[] => {\n  const date = new Date(current);\n  const weekDates = [];\n  date.setDate(date.getDate() - date.getDay());\n  for (var i = 0; i < 7; i++) {\n    weekDates.push(new Date(date));\n    date.setDate(date.getDate() + 1);\n  }\n  return weekDates.map((date) => ({\n    date,\n    weekDayName: days[date.getDay()].substr(0, 3),\n  }));\n};\n\n/**\n *\n * @returns Array with hours from [0...23]\n */\nexport const getFormattedDayHours = (): string[] => {\n  const arr = [];\n  for (let i = 0; i < 24; i++) {\n    arr.push(\n      `${i === 0 ? \"12\" : i > 12 ? i - 12 : i}:00 ${i < 12 ? \"am\" : \"pm\"}`\n    );\n  }\n  return arr;\n};\n\nconst months: string[] = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\n/**\n *\n * @param date  Date Object\n * @returns string for the passed date in format:  \"MONTH YYYY\"\n */\nexport const getDateFormattedMonthYear = (date: Date) => {\n  return `${months[date.getMonth()]} ${date.getFullYear()}`;\n};\n\n/**\n *\n * @param date start date of event\n * @param duration duration of event\n * @returns formatted string in format `HH:MM:am/pm - HH:MM:am/pm`\n */\nexport const getFormattedTimeStampForEvent = (\n  date: Date,\n  duration: number\n): string => {\n  const startHours = date.getHours();\n  const startMinutes = date.getMinutes();\n  const endDate = new Date(date);\n  endDate.setMinutes(endDate.getMinutes() + duration);\n  const endHours = endDate.getHours();\n  const endMinutes = endDate.getMinutes();\n\n  return `${formatTimeString(startHours, startMinutes)} - ${formatTimeString(\n    endHours,\n    endMinutes\n  )}`;\n};\n\n// format time to readable string\nconst formatTimeString = (hours: number, minutes: number): string =>\n  `${hours === 0 ? \"12\" : hours > 12 ? hours - 12 : hours}:${\n    minutes >= 30 ? \"30\" : \"00\"\n  } ${hours < 12 ? \"am\" : \"pm\"}`;\n","export const CALENDAR_COLUMN_HEIGHT = 60;\n\nexport type SingleEvent = {\n  title: string;\n  date: Date;\n  duration: number;\n};\n\nexport type EventsDataMap = {\n  [key: string]: SingleEvent[];\n};\n\n// Database constants\nexport const DATABASE_NAME = \"calendar\";\nexport const EVENTS_TABLE_NAME = \"events\";\n","import styled from \"@material-ui/core/styles/styled\";\nimport Box from \"@material-ui/core/Box\";\nimport lightBlue from \"@material-ui/core/colors/lightBlue\";\n\n// type defination for EventOverlay position\ntype OverlayPositionProps = {\n  top: string | number;\n  height: string | number;\n};\n\n// returns EventOverlay position\nconst getEventOverlayPosition = (\n  duration: number,\n  minutes: number\n): OverlayPositionProps => {\n  return {\n    top: minutes >= 30 ? \"30px\" : 0,\n    height: duration,\n  };\n};\n\ntype props = {\n  eventDuration: number;\n  eventDate: Date;\n  children?: React.ReactNode;\n};\n\n// EventOverlay component\nconst EventOverlay = ({\n  eventDuration,\n  eventDate,\n  children,\n}: props): JSX.Element => {\n  const position: OverlayPositionProps = getEventOverlayPosition(\n    eventDuration,\n    eventDate.getMinutes()\n  );\n  return <EventOverlayWrapper {...position}>{children}</EventOverlayWrapper>;\n};\n\nconst EventOverlayWrapper = styled(Box)(({ theme }) => ({\n  position: \"absolute\",\n  right: 0,\n  left: 0,\n  boxShadow: theme.shadows[2],\n  zIndex: theme.zIndex.tooltip,\n  background: lightBlue[500],\n  color: \"#fff\",\n  borderRadius: theme.spacing(1),\n  padding: theme.spacing(1),\n}));\n\nexport default EventOverlay;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport {\n  getFormattedDayHours,\n  WeekDay,\n  getFormattedTimeStampForEvent,\n} from \"utils/calendarUtils\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CALENDAR_COLUMN_HEIGHT, SingleEvent } from \"utils/constants\";\nimport EventOverlay from \"Components/EventOverlay\";\n\n// Component Props\ntype Props = {\n  day: WeekDay;\n  events: SingleEvent[];\n  children?: React.ReactNode;\n};\n\n/**\n * Render Calendar Column for 24hours for a day\n */\nconst CalendarDayColumn = ({\n  day,\n  events = [],\n  ...props\n}: Props): JSX.Element => {\n  const renderEventForHour = (hour: number) => {\n    const event = events.find((event) => event.date.getHours() === hour);\n    if (event) {\n      return (\n        <EventOverlay eventDuration={event.duration} eventDate={event.date}>\n          <Typography variant=\"subtitle2\" noWrap>\n            {event.title}\n          </Typography>\n          <Typography variant=\"caption\">\n            {getFormattedTimeStampForEvent(event.date, event.duration)}\n          </Typography>\n        </EventOverlay>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box\n      position=\"relative\"\n      {...props}\n      display=\"flex\"\n      flexDirection=\"column\"\n      flex={1}\n    >\n      {getFormattedDayHours().map((hourLabel, hour) => (\n        <Box\n          key={`${hourLabel}_${hour}`}\n          border={1}\n          borderColor=\"divider\"\n          p={1}\n          position=\"relative\"\n          height={CALENDAR_COLUMN_HEIGHT}\n        >\n          {renderEventForHour(hour)}\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\nexport default CalendarDayColumn;\n","import EventNoteIcon from \"@material-ui/icons/EventNoteRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeftRounded\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRightRounded\";\nimport styled from \"@material-ui/core/styles/styled\";\nimport { getDateFormattedMonthYear } from \"utils/calendarUtils\";\n\n// type defination for component props\ntype Props = {\n  goToNextWeek: () => void;\n  goToPrevWeek: () => void;\n  goToTodaysDate: () => void;\n  startDate: Date;\n};\n\n/**\n * Renders Calendar toolbar with controls\n */\nconst CalendarToolbar = ({\n  startDate,\n  goToNextWeek,\n  goToPrevWeek,\n  goToTodaysDate,\n}: Props) => {\n  return (\n    <Box\n      display=\"flex\"\n      flex=\"none\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Box display=\"flex\" alignItems=\"center\">\n        <EventNoteIcon color=\"action\" />\n        <Typography color=\"textSecondary\" variant=\"h5\">\n          Meetings\n        </Typography>\n      </Box>\n\n      <Box display=\"flex\" alignItems=\"center\">\n        <Button variant=\"outlined\" size=\"medium\" onClick={goToTodaysDate}>\n          Today\n        </Button>\n        <ControlButtonsWrapper>\n          <IconButton onClick={goToPrevWeek}>\n            <ChevronLeftIcon />\n          </IconButton>\n          <IconButton onClick={goToNextWeek}>\n            <ChevronRightIcon />\n          </IconButton>\n        </ControlButtonsWrapper>\n        <Typography variant=\"h4\" color=\"textSecondary\">\n          {getDateFormattedMonthYear(startDate)}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nconst ControlButtonsWrapper = styled(Box)(({ theme }) => ({\n  marginLeft: theme.spacing(1),\n  marginRight: theme.spacing(6),\n}));\n\nexport default CalendarToolbar;\n","import { IDBPDatabase, openDB } from \"idb\";\n\n// Utility Class to handle IndexedDb operations using idb\nclass IndexedDb {\n  private database: string;\n  private db: any;\n\n  constructor(database: string) {\n    this.database = database;\n  }\n\n  public async createObjectStore(tableName: string) {\n    try {\n      this.db = await openDB(this.database, 1, {\n        upgrade(db: IDBPDatabase) {\n          if (!db.objectStoreNames.contains(tableName)) {\n            db.createObjectStore(tableName, {\n              autoIncrement: true,\n              keyPath: \"id\",\n            });\n          }\n        },\n      });\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public async getAllValue(tableName: string) {\n    const tx = this.db.transaction(tableName, \"readonly\");\n    const store = tx.objectStore(tableName);\n    const result = await store.getAll();\n    console.debug(\"Get All Data\", JSON.stringify(result));\n    return result;\n  }\n\n  public async putBulkValue(tableName: string, values: object[]) {\n    const tx = this.db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    for (const value of values) {\n      const result = await store.put(value);\n      console.debug(\"Put Bulk Data \", JSON.stringify(result));\n    }\n    return this.getAllValue(tableName);\n  }\n}\n\nexport default IndexedDb;\n","export const events = [\n  {\n    title: \"Jennifer calendar event\",\n    date: \"Mon Feb 22 2021 01:30:47 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Ina calendar event\",\n    date: \"Wed Feb 03 2021 23:30:20 GMT+0530 (India Standard Time)\",\n    duration: 90,\n  },\n  {\n    title: \"Latisha calendar event\",\n    date: \"Tue Jun 01 2021 00:08:02 GMT+0530 (India Standard Time)\",\n    duration: 360,\n  },\n  {\n    title: \"Dodson calendar event\",\n    date: \"Fri Jun 17 2021 07:32:06 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Noel calendar event\",\n    date: \"Thu Mar 18 2021 13:11:26 GMT+0530 (India Standard Time)\",\n    duration: 240,\n  },\n  {\n    title: \"Neva calendar event\",\n    date: \"Sun Jun 06 2021 03:20:58 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Price calendar event\",\n    date: \"Wed Mar 17 2021 17:12:10 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Lakisha calendar event\",\n    date: \"Wed Jun 09 2021 22:38:18 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Lelia calendar event\",\n    date: \"Sat Apr 25 2021 11:53:14 GMT+0530 (India Standard Time)\",\n    duration: 120,\n  },\n  {\n    title: \"Marguerite calendar event\",\n    date: \"Wed May 27 2021 21:52:50 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Albert calendar event\",\n    date: \"Sun Apr 04 2021 18:27:07 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Elise calendar event\",\n    date: \"Mon May 10 2021 12:35:26 GMT+0530 (India Standard Time)\",\n    duration: 240,\n  },\n  {\n    title: \"Howard calendar event\",\n    date: \"Mon May 17 2021 01:38:39 GMT+0530 (India Standard Time)\",\n    duration: 210,\n  },\n  {\n    title: \"Joanna calendar event\",\n    date: \"Sat Feb 20 2021 19:50:12 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Saundra calendar event\",\n    date: \"Sat Jun 05 2021 16:38:34 GMT+0530 (India Standard Time)\",\n    duration: 120,\n  },\n  {\n    title: \"Rosie calendar event\",\n    date: \"Fri Apr 24 2021 19:25:34 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Ball calendar event\",\n    date: \"Sun May 16 2021 18:11:01 GMT+0530 (India Standard Time)\",\n    duration: 90,\n  },\n  {\n    title: \"Peggy calendar event\",\n    date: \"Wed Jan 06 2021 02:34:34 GMT+0530 (India Standard Time)\",\n    duration: 210,\n  },\n  {\n    title: \"Simone calendar event\",\n    date: \"Thu Apr 22 2021 01:26:23 GMT+0530 (India Standard Time)\",\n    duration: 240,\n  },\n  {\n    title: \"Ester calendar event\",\n    date: \"Tue Mar 09 2021 06:37:15 GMT+0530 (India Standard Time)\",\n    duration: 210,\n  },\n  {\n    title: \"Gamble calendar event\",\n    date: \"Wed Apr 21 2021 07:49:18 GMT+0530 (India Standard Time)\",\n    duration: 240,\n  },\n  {\n    title: \"Roberta calendar event\",\n    date: \"Thu Apr 29 2021 13:41:25 GMT+0530 (India Standard Time)\",\n    duration: 120,\n  },\n  {\n    title: \"Acosta calendar event\",\n    date: \"Sun Jun 16 2021 16:10:53 GMT+0530 (India Standard Time)\",\n    duration: 240,\n  },\n  {\n    title: \"Jackie calendar event\",\n    date: \"Mon Jan 11 2021 07:30:31 GMT+0530 (India Standard Time)\",\n    duration: 30,\n  },\n  {\n    title: \"Jessica calendar event\",\n    date: \"Wed Jan 27 2021 23:05:15 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Leann calendar event\",\n    date: \"Thu Mar 25 2021 10:28:24 GMT+0530 (India Standard Time)\",\n    duration: 210,\n  },\n  {\n    title: \"Irwin calendar event\",\n    date: \"Fri Apr 30 2021 11:03:24 GMT+0530 (India Standard Time)\",\n    duration: 210,\n  },\n  {\n    title: \"Elvira calendar event\",\n    date: \"Fri Apr 16 2021 16:17:41 GMT+0530 (India Standard Time)\",\n    duration: 180,\n  },\n  {\n    title: \"Miles calendar event\",\n    date: \"Fri May 07 2021 00:29:51 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Harris calendar event\",\n    date: \"Thu Apr 15 2021 11:53:38 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Whitney calendar event\",\n    date: \"Mon Mar 22 2021 12:58:37 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n  {\n    title: \"Watson calendar event\",\n    date: \"Wed Mar 10 2021 09:57:21 GMT+0530 (India Standard Time)\",\n    duration: 30,\n  },\n  {\n    title: \"Polly calendar event\",\n    date: \"Tue Apr 06 2021 02:38:01 GMT+0530 (India Standard Time)\",\n    duration: 90,\n  },\n  {\n    title: \"Lesa calendar event\",\n    date: \"Tue Feb 23 2021 12:26:24 GMT+0530 (India Standard Time)\",\n    duration: 120,\n  },\n  {\n    title: \"Imogene calendar event\",\n    date: \"Wed Mar 03 2021 07:28:50 GMT+0530 (India Standard Time)\",\n    duration: 240,\n  },\n  {\n    title: \"Eileen calendar event\",\n    date: \"Sun Feb 21 2021 20:40:15 GMT+0530 (India Standard Time)\",\n    duration: 60,\n  },\n];\n","import React, { useEffect, useState } from \"react\";\nimport {\n  DATABASE_NAME,\n  EventsDataMap,\n  EVENTS_TABLE_NAME,\n} from \"utils/constants\";\nimport IndexedDb from \"utils/db\";\nimport { events } from \"utils/eventsData\";\n\ninterface AppContextInterface {\n  eventsData: EventsDataMap;\n}\n\n/**\n * Context to manage app state\n */\nconst AppContext = React.createContext<AppContextInterface>({ eventsData: {} });\n\n/**\n * Indexed Db instance\n */\nconst db = new IndexedDb(DATABASE_NAME);\n\n/**\n * Context Provider to wrap component with AppContext\n * giving access to context Data\n */\nexport const AppContextProvider = (props: React.PropsWithChildren<{}>) => {\n  const [eventsData, setEventsData] = useState<EventsDataMap>({});\n\n  // adds add to the db if not exist and set context state\n  useEffect(() => {\n    const addDataToDB = async () => {\n      await db.createObjectStore(EVENTS_TABLE_NAME);\n      const data = await db.getAllValue(EVENTS_TABLE_NAME);\n      if (data.length === 0) {\n        await db.putBulkValue(EVENTS_TABLE_NAME, events);\n      } else {\n        console.log(\"Data already in indexedDb\");\n      }\n\n      const eventsMap: EventsDataMap = {};\n\n      // transforms the data to the format usable by our app\n      events.forEach((event) => {\n        const date = new Date(event.date);\n        const key = date.toDateString();\n        if (!eventsMap[key]) {\n          eventsMap[key] = [];\n        }\n        eventsMap[key].push({ ...event, date: new Date(event.date) });\n      });\n\n      setEventsData(eventsMap);\n    };\n    addDataToDB();\n  }, []);\n\n  return (\n    <AppContext.Provider value={{ eventsData }}>\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContext;\n","import { useContext, useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"@material-ui/core/styles/styled\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport CalendarHeader from \"Components/CalendarHeader\";\nimport CalendarDayColumn from \"Components/CalendarDayColumn\";\nimport CalendarToolbar from \"Components/CalendarToolbar\";\nimport AppContext from \"Context/AppContext\";\nimport {\n  getAllWeekDays,\n  getFormattedDayHours,\n  WeekDay,\n} from \"utils/calendarUtils\";\nimport { CALENDAR_COLUMN_HEIGHT } from \"utils/constants\";\n\n/**\n * Render Calendar with Weekview\n */\nconst CalendarView = (): JSX.Element => {\n  // state for managing current selected week\n  const [startDate, setStartDate] = useState<Date>(new Date());\n  const [weekDays, setWeekDays] = useState<WeekDay[]>(getAllWeekDays());\n\n  // get events data from app context\n  const { eventsData } = useContext(AppContext);\n\n  const goToNextWeek = () => {\n    let nextWeekDate = new Date(startDate);\n    nextWeekDate.setDate(nextWeekDate.getDate() + 7);\n    setStartDate(nextWeekDate);\n    setWeekDays(getAllWeekDays(nextWeekDate));\n  };\n\n  const goToPrevWeek = () => {\n    let prevWeekDate = new Date(startDate);\n    prevWeekDate.setDate(prevWeekDate.getDate() - 7);\n    setStartDate(prevWeekDate);\n    setWeekDays(getAllWeekDays(prevWeekDate));\n  };\n\n  const goToTodaysDate = () => {\n    let todayDate = new Date();\n    setStartDate(todayDate);\n    setWeekDays(getAllWeekDays());\n  };\n\n  return (\n    <Wrapper maxWidth={false}>\n      <CalendarToolbar\n        goToNextWeek={goToNextWeek}\n        goToPrevWeek={goToPrevWeek}\n        goToTodaysDate={goToTodaysDate}\n        startDate={startDate}\n      />\n      <CalendarHeader weekDays={weekDays} />\n      <CalendarGridWrapper>\n        <Box alignItems=\"flex-start\" height=\"auto\" flex=\"none\" width=\"65px\">\n          {getFormattedDayHours().map((hour) => (\n            <Box key={hour} height={CALENDAR_COLUMN_HEIGHT} position=\"relative\">\n              <Timelabel variant=\"caption\">{hour}</Timelabel>\n            </Box>\n          ))}\n        </Box>\n        <Box display=\"flex\" flex={1} alignItems=\"flex-start\">\n          <Box width={9} minWidth={9} />\n          {weekDays.map((day) => (\n            <CalendarDayColumn\n              key={day.date.toDateString()}\n              day={day}\n              events={eventsData[day.date.toDateString()]}\n            />\n          ))}\n        </Box>\n      </CalendarGridWrapper>\n    </Wrapper>\n  );\n};\n\nconst Timelabel = styled(Typography)(({ theme }) => ({\n  position: \"absolute\",\n  top: theme.spacing(-1.6),\n  right: \"0\",\n}));\n\nconst Wrapper = styled(Container)({\n  display: \"flex\",\n  flexDirection: \"column\",\n  height: \"100%\",\n  overflow: \"hidden\",\n});\n\nconst CalendarGridWrapper = styled(Box)({\n  position: \"relative\",\n  flex: 1,\n  display: \"flex\",\n  overflowY: \"scroll\",\n  overflow: \"visible\",\n  \"&::-webkit-scrollbar\": {\n    display: \"none\",\n  },\n});\n\nexport default CalendarView;\n","import Grid from \"@material-ui/core/Grid\";\nimport { styled } from \"@material-ui/core\";\nimport Navbar from \"Components/Navbar\";\nimport CalendarView from \"Containers/CalendarView\";\n\nconst Home = (): JSX.Element => {\n  return (\n    <Wrapper container direction=\"column\">\n      <Navbar />\n      <ContentArea item>\n        <CalendarView />\n      </ContentArea>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Grid)({\n  height: \"100vh\",\n});\n\nconst ContentArea = styled(Grid)(({ theme }) => ({\n  flex: 1,\n  overflow: \"auto\",\n  paddingTop: theme.spacing(2),\n  paddingBottom: theme.spacing(2),\n}));\n\nexport default Home;\n","import ErrorBoundary from \"Components/ErrorBoundary\";\nimport Home from \"Containers/Home\";\nimport { AppContextProvider } from \"Context/AppContext\";\n\nfunction App(): JSX.Element {\n  return (\n    <ErrorBoundary>\n      <AppContextProvider>\n        <Home />\n      </AppContextProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst defaultTheme = createMuiTheme({\n  palette: {\n    common: { black: \"#000\", white: \"#fff\" },\n    background: { paper: \"#fff\", default: \"#fafafa\" },\n    primary: {\n      light: \"#7986cb\",\n      main: \"rgba(123, 139, 234, 1)\",\n      dark: \"#303f9f\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#ff4081\",\n      main: \"rgba(226, 64, 104, 0.86)\",\n      dark: \"#c51162\",\n      contrastText: \"#fff\",\n    },\n    error: {\n      light: \"#e57373\",\n      main: \"#f44336\",\n      dark: \"#d32f2f\",\n      contrastText: \"#fff\",\n    },\n    text: {\n      primary: \"rgba(0, 0, 0, 0.87)\",\n      secondary: \"rgba(0, 0, 0, 0.54)\",\n      disabled: \"rgba(0, 0, 0, 0.38)\",\n      hint: \"rgba(0, 0, 0, 0.38)\",\n    },\n  },\n});\n\nexport default defaultTheme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport theme from \"themes/default\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}